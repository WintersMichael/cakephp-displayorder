<?phpclass DisplayOrderBehavior extends ModelBehavior {	//'DO' is short for 'DisplayOrder' throughout this code.		public function setup(Model $model, $settings) {		if (!isset($this->settings[$model->alias])) {			$this->settings[$model->alias] = array(				'DisplayOrderField' => 'displayorder',			);		}	}	public function beforeSave(Model $model) {		$rec = $model->recursive;		$model->recursive = -1;		if (!strlen($model->id)) { //don't change DO for existing records			//find the correct DO for new records			$saveData = $model->data;			if (!isset($model->displayOrderConditions)) { $model->displayOrderConditions = array(); }			$searchField = "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']}";			$maxData = $model->find('all', array(				'fields' => "MAX({$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']}) as Max",				'conditions' => $model->displayOrderConditions			));			$maxDO = $maxData[0][0]['Max'];			$model->data = $saveData;			$model->data[$model->alias][$this->settings[$model->alias]['DisplayOrderField']] = ($maxDO == '' ? 0 : $maxDO + 1);		}		$model->recursive = $rec;		return true;	}		public function moveUp(Model $model) {		$curId = $model->id;		$curDO = $this->getCurDO($model);		$model->recursive = 0;		if ($curDO === false) { return; } //can't find this id				//get id and DO of previous item		if (!isset($model->displayOrderConditions)) { $model->displayOrderConditions = array(); }		$conditions = array_merge(			array("{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']} < " => $curDO),			$model->displayOrderConditions		);		$prevDO = $model->find('all', array(			'fields' => array($model->alias . '.id', "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']}"),			'conditions' => $conditions,			'order' => "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']} DESC",			'limit' => 1		));		if (!count($prevDO)) { return; } //can't find anything with a lower DO				$prevId = $prevDO[0][$model->alias]['id'];		$prevDO = $prevDO[0][$model->alias][$this->settings[$model->alias]['DisplayOrderField']];		//give cur id the prev DO				$updateData = array(			$model->alias => array(				$this->settings[$model->alias]['DisplayOrderField'] => $prevDO			)		);		$model->id = $curId;		$model->save($updateData, false, array($this->settings[$model->alias]['DisplayOrderField']));				//give prev id the cur DO		$updateData = array(			$model->alias => array(				$this->settings[$model->alias]['DisplayOrderField'] => $curDO			)		);		$model->id = $prevId;		$model->save($updateData, false, array($this->settings[$model->alias]['DisplayOrderField']));	}		public function moveDown(Model $model) {		$curId = $model->id;		$curDO = $this->getCurDO($model);		$model->recursive = 0;		if ($curDO === false) { return; } //can't find this id				//get id and DO of next item		if (!isset($model->displayOrderConditions)) { $model->displayOrderConditions = array(); }		$conditions = array_merge(			array("{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']} > " => $curDO),			$model->displayOrderConditions		);		$nextDO = $model->find('all', array(			'fields' => array($model->alias . '.id', "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']}"),			'conditions' => $conditions,			'order' => "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']} ASC",			'limit' => 1		));		if (!count($nextDO)) { return; } //can't find anything with a higher DO				$nextId = $nextDO[0][$model->alias]['id'];		$nextDO = $nextDO[0][$model->alias][$this->settings[$model->alias]['DisplayOrderField']];				//give cur id the next DO				$updateData = array(			$model->alias => array(				$this->settings[$model->alias]['DisplayOrderField'] => $nextDO			)		);		$model->id = $curId;		$model->save($updateData, false, array($this->settings[$model->alias]['DisplayOrderField']));				//give next id the cur DO		$updateData = array(			$model->alias => array(				$this->settings[$model->alias]['DisplayOrderField'] => $curDO			)		);		$model->id = $nextId;		$model->save($updateData, false, array($this->settings[$model->alias]['DisplayOrderField']));	}			public function beforeDelete(Model $model) {		//save current state		$curId = $model->id;		$curData = $model->data;		$curDO = $this->getCurDO($model);		if ($curDO === false) { return; } //can't find this id				//find all items with higher DO than this one		if (!isset($model->displayOrderConditions)) { $model->displayOrderConditions = array(); }		$conditions = array_merge(			array("{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']} > " => $curDO),			$model->displayOrderConditions		);		$affectedItems = $model->find('all', array(			'fields' => array($model->alias . '.id', "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']}"),			'conditions' => $conditions,			'order' => "{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']} ASC",		));		//decrement DO on all items with higher DO than this one				foreach($affectedItems as $affectedItem) {			$updateData = array(				$model->alias => array(					$this->settings[$model->alias]['DisplayOrderField'] => $affectedItem[$model->alias][$this->settings[$model->alias]['DisplayOrderField']] - 1				)			);			$model->id = $affectedItem[$model->alias]['id'];			$model->save($updateData, false, array($this->settings[$model->alias]['DisplayOrderField']));		}				//restore original state		$model->id = $curId;		$model->data = $curData;		return true;	}		private function getCurDO(Model $model) {		$curDO = $model->find('first', array(			'conditions' => array($model->alias . '.id' => $model->id),			'fields' => array("{$model->alias}.{$this->settings[$model->alias]['DisplayOrderField']}")		));		if (!count($curDO)) { return false; } //can't find this id, TODO return false?		return $curDO[$model->alias][$this->settings[$model->alias]['DisplayOrderField']];	}}